<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[smalldragonluo]]></title>
  <subtitle><![CDATA[I'm not single, I'm solo.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.smalldragonluo.com/"/>
  <updated>2016-02-06T05:59:36.000Z</updated>
  <id>http://blog.smalldragonluo.com/</id>
  
  <author>
    <name><![CDATA[smalldragonluo]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[一个简单的 JS 模板引擎]]></title>
    <link href="http://blog.smalldragonluo.com/2016/02/05/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-JS-%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    <id>http://blog.smalldragonluo.com/2016/02/05/一个简单的-JS-模板引擎/</id>
    <published>2016-02-05T02:19:25.000Z</published>
    <updated>2016-02-06T05:59:36.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>快过年了，需求不饱和，有时间写写博客。</p>
</blockquote>
<h3 id="What’s_this?">What’s this?</h3><p>这是一个清爽的 JavaScript 语法模板引擎，使用自带的 JavaScript 解释器，无中间语法，压缩后仅 0.45 kb。</p>
<p>思路：</p>
<ul>
<li>拆分语句与表达式（一次处理，提高性能）</li>
<li>拼装 compiler 函数</li>
<li>转义 html 中的单引号与转义符，保留函数与 html 格式</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tpl</span>(<span class="params">tpl</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 关于传递 RegExp https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split</span></span><br><span class="line">  <span class="keyword">var</span> snippet = tpl.split(<span class="regexp">/(?=&lt;%)|(%&gt;)/</span>);</span><br><span class="line">  <span class="keyword">var</span> mCode = [</span><br><span class="line">    <span class="string">'var _tplSnippet = [];'</span>,</span><br><span class="line">    <span class="string">'with(_tplData) &#123;'</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; snippet.length; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> snippet[i] !== <span class="string">'undefined'</span> &amp;&amp; snippet[i] !== <span class="string">'%&gt;'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (snippet[i].substring(<span class="number">0</span>, <span class="number">2</span>) === <span class="string">'&lt;%'</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果是表达式</span></span><br><span class="line">        <span class="keyword">if</span> (snippet[i].charAt(<span class="number">2</span>) === <span class="string">'='</span>) &#123;</span><br><span class="line">          mCode.push(snippet[i].replace(<span class="regexp">/&lt;%=((\s|.)+)/g</span>, <span class="string">'_tplSnippet.push($1);'</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 如果是语句</span></span><br><span class="line">          mCode.push(snippet[i].replace(<span class="regexp">/&lt;%((\s|.)+)/g</span>, <span class="string">'$1'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果是 html</span></span><br><span class="line">        mCode.push(<span class="string">'_tplSnippet.push(\''</span> + snippet[i].replace(<span class="regexp">/\\/g</span>, <span class="string">'\\\\'</span>).replace(<span class="regexp">/'/g</span>, <span class="string">'\\\''</span>).replace(<span class="regexp">/\n/g</span>, <span class="string">'\\n'</span>) + <span class="string">'\');'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mCode.push(<span class="string">'&#125;'</span>, <span class="string">'return _tplSnippet.join(\'\');'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'_tplData'</span>, mCode.join(<span class="string">''</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ShowCase">ShowCase</h3><p>你可以在这里编辑模板与数据</p>
<textarea class="J_Tpl custom-tpl"></textarea>

<textarea class="J_Data custom-data"></textarea>

<button class="J_Compile custom-btn">运行</button>

<pre class="J_Result custom-result"></pre>

<h3 id="性能">性能</h3><p>我做了一些测试，结果证明，即便是模板中包含大量复杂的业务逻辑，构建渲染函数过程的性能消耗也是微乎其微的，查看 TimeLine 时间大概在 1 毫秒左右。<br>所以我得出的结论是：</p>
<p><em>如果你的模板引擎使用原生 JavaScript 语法，并未加入其它预处理，那么你不应当使用离线编译，这造成了请求代码量的增加，却并未带来明显好处，尤其是在移动端等频繁使用原生语法的场景</em>。</p>
<style>
  .custom-tpl, .custom-data {
    width: 100%;
    height: 310px;
    outline: none;
    resize: vertical;
    padding: 4px 8px;
    border-radius: 7px;
    border: 1px solid #DDD;
  }
  .custom-btn {
    outline: none;
    display: inline-block;
    padding: 3px 20px 3px;
    line-height: 30px;
    color: #444;
    font-size: 13px;
    background: white;
    border: 1px solid #ddd;
  }
</style>

<script class="J_TplStore" type="text/html">
  <ul>
   <% for(var i = 0; i < data.length; i++) { %>
     <li>
     <% if(i === 1) { %>
     <i> * </i>
     <% } %>
     <%= data[i] %>
     </li>
   <% } %>
  </ul>
</script>

<script class="J_DataStore" type="text/html">
  {
    "data": [1, 2, 3]
  }
</script>

<script>
  setTimeout(function() {
    function Tpl(tpl) {
      // 关于传递 RegExp https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split
      var snippet = tpl.split(/(?=<%)|(%>)/);
      var mCode = [
        'var _tplSnippet = [];',
        'with(_tplData) {'
      ];

      for (var i = 0; i < snippet.length; ++i) {
        if (typeof snippet[i] !== 'undefined' && snippet[i] !== '%>') {
          if (snippet[i].substring(0, 2) === '<%') {
            // 如果是表达式
            if (snippet[i].charAt(2) === '=') {
              mCode.push(snippet[i].replace(/<%=((\s|.)+)/g, '_tplSnippet.push($1);'));
            } else {
              // 如果是语句
              mCode.push(snippet[i].replace(/<%((\s|.)+)/g, '$1'));
            }
          } else {
            // 如果是 html
            mCode.push('_tplSnippet.push(\'' + snippet[i].replace(/\\/g, '\\\\').replace(/'/g, '\\\'').replace(/\n/g, '\\n') + '\');');
          }
        }
      }

      mCode.push('}', 'return _tplSnippet.join(\'\');');

      return new Function('_tplData', mCode.join(''));
    }

    $('.J_Tpl').val($('.J_TplStore').html());
    $('.J_Data').val($('.J_DataStore').html());

    $('.J_Compile').on('click', function(){
      if(!JSON) {
        $('.J_Result').text('你的浏览器没有 JSON 对象，请切换浏览器再试');
        return;
      }

      var compiler, data, t, cTime, rTime;

      try {
        t = new Date().getTime();
        compiler = Tpl($('.J_Tpl').val());
        cTime = new Date().getTime() - t;
      } catch(e) {
        $('.J_Result').text('模板格式错误\n' + e.stack);
        return;
      }

      try {
        data = JSON.parse($('.J_Data').val());
      } catch(e) {
        $('.J_Result').text('数据格式错误\n' + e.stack);
        return;
      }

      try {
        t = new Date().getTime();
        var html = compiler(data);
        rTime = new Date().getTime() - t;
        $('.J_Result').text('<!-- 创建渲染函数用时：' + cTime + ' ms, 渲染用时：' + rTime + ' ms -->\n' + html);
      } catch(e) {
        $('.J_Result').text('渲染错误\n' + e.stack);
        return;
      }
    }).trigger('click');
  }, 100);
</script>
]]></content>
    <summary type="html">
    <![CDATA[本文讲述了如何用简单的代码实现一个 JavaScript 语法模板引擎]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.smalldragonluo.com/tags/JavaScript/"/>
    
      <category term="模板引擎" scheme="http://blog.smalldragonluo.com/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
      <category term="正则表达式" scheme="http://blog.smalldragonluo.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[regeneratorRuntime is not defined]]></title>
    <link href="http://blog.smalldragonluo.com/2016/01/25/regeneratorRuntime-is-not-defined/"/>
    <id>http://blog.smalldragonluo.com/2016/01/25/regeneratorRuntime-is-not-defined/</id>
    <published>2016-01-25T14:09:02.000Z</published>
    <updated>2016-02-06T06:00:35.000Z</updated>
    <content type="html"><![CDATA[<h4 id="起因">起因</h4><p>最近在开发团队自动化工具：一个基于 Node.js 的本地 SDK，和一个配套 web UI。其实本来想一个 jQuery 解决问题，同事说，用 React，大家都用这个，都说好。我说，那咱们还等什么？<br>就这样最终选择了 React.js，然后理所当然地加上了 React Router，Redux，Webpack，ES6。为了和前端保持一致，服务端也跟着使用了 ES6，这是事件的起因。</p>
<p>在 OS X 上整个开发过程比较顺利，但由于外包同学需要使用 windows，所以我需要做兼容测试。当某一天我把 SDK 放到 windows 上运行的时候卧槽它居然！！你猜怎么着？？</p>
<p>居然跑不起来。跑起来我也就不用写了。</p>
<p>根据 stack 信息，一开始以为是 Babel 的问题，最后经过仔细排查，发现是 SDK 依赖的宿主环境，而这个环境我没办法修改，因此我只能另寻出路。</p>
<p>没法使用 babel/register，那就只能将 ES6 编译成 ES5，然后 polyfill 一下。</p>
<p>我使用的 Babel 版本为 5.8.3，默认提供转换所有已经支持的最新 ES 特性，6.x 需要手动安装需要使用的特性或使用预置集（preset）。目前提供有 6 个预置集，分别是</p>
<ul>
<li>es2015</li>
<li>stage-0</li>
<li>stage-1</li>
<li>stage-2</li>
<li>stage-3</li>
<li>react</li>
</ul>
<p>我选择了 es2015，包含丰富的插件，支持包括 arrow function，Generator function，以及 Node 4.x 目前并不支持的 Module import。</p>
<h4 id="经过">经过</h4><p>使用官方指定的 gulp-babel 编译后提示</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReferenceError: regeneratorRuntime is not defined.</span><br></pre></td></tr></table></figure>
<p>我思索良久，仍不解心头之惑 —— 为什么，为什么他们要把一个变量定义的这么长？</p>
<p>凭着我的聪明才智，我翻看 build 之后的文件，发现每个头部都添加了 <code>&#39;use strict;&#39;</code>，难道，这就是祸乱的根源？</p>
<p>通过 Google 之，发现这个 <a href="https://phabricator.babeljs.io/T6676" target="_blank" rel="external">issue</a> 里有人遇到同样的问题。由于 es2015 已经自带了 transform-regenerator，所以我猜测由于严格模式导致 <code>regeneratorRuntime</code> 这个全局变量声明失败，我于是注释掉了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules/babel-preset-es2015/node_modules/babel-plugin-transform-es2015-modules-commonjs/lib/index.js</span><br></pre></td></tr></table></figure>
<p>第 130 行的 </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inherits: <span class="built_in">require</span>(<span class="string">"babel-plugin-transform-strict-mode"</span>)</span><br></pre></td></tr></table></figure>
<p>运行成功！</p>
<p>也可以在需要使用 generator 的代码中引入 <code>babel-polyfill</code>，但这在 Babel 5 中是不必要的，不够整洁。</p>
<p>如果你不想转换 generator 函数，可以注释掉 <code>babel-plugin-transform-regenerator</code>。</p>
]]></content>
    <summary type="html">
    <![CDATA[最近在开发团队自动化工具：一个基于 Node.js 的本地 SDK，和一个配套 web UI。其实本来想一个 jQuery 解决问题，同事说，用 React，大家都用这个，都说好。我说，那咱们还等什么？]]>
    
    </summary>
    
      <category term="Babel" scheme="http://blog.smalldragonluo.com/tags/Babel/"/>
    
      <category term="Gulp" scheme="http://blog.smalldragonluo.com/tags/Gulp/"/>
    
      <category term="JavaScript" scheme="http://blog.smalldragonluo.com/tags/JavaScript/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅析语法分析树]]></title>
    <link href="http://blog.smalldragonluo.com/2015/12/06/%E6%B5%85%E6%9E%90%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E6%A0%91/"/>
    <id>http://blog.smalldragonluo.com/2015/12/06/浅析语法分析树/</id>
    <published>2015-12-06T14:53:42.000Z</published>
    <updated>2015-12-26T15:08:52.000Z</updated>
    <content type="html"><![CDATA[<h4 id="语法分析树">语法分析树</h4><p>语法分析树，一般称它为具体语法树，相应的语法称之为该语言的具体语法。语法分析树和产生式相对应，用于展现从文法开始符号推导符号串的过程。<br>语法分析树是一种树形结构，是语法制导翻译中不可缺少的因素。</p>
<h4 id="节点形式">节点形式</h4><ul>
<li>树的根节点是文法的开始符号</li>
<li>叶子节点为终结符号或者 ∈</li>
<li>内部节点的标号为非终结符号</li>
</ul>
<h4 id="图示">图示</h4><p>以下列产生式为例</p>
<ul>
<li>A -&gt; + A A</li>
<li>A -&gt; - A A</li>
<li>A -&gt; digit</li>
</ul>
<p>+ 1 - 2 3 对应的语法分析树是</p>
<p><img src="/assets/st.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="语法分析树">语法分析树</h4><p>语法分析树，一般称它为具体语法树，相应的语法称之为该语言的具体语法。语法分析树和产生式相对应，用于展现从文法开始符号推导符号串的过程。<br>语法分析树是一种树形结构，是语法制导翻译中不可缺少的因素。</p>
<h4 id=]]>
    </summary>
    
      <category term="编译器" scheme="http://blog.smalldragonluo.com/tags/%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
      <category term="语法分析树" scheme="http://blog.smalldragonluo.com/tags/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E6%A0%91/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="编译" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅析上下文无关文法]]></title>
    <link href="http://blog.smalldragonluo.com/2015/12/06/%E6%B5%85%E6%9E%90%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/"/>
    <id>http://blog.smalldragonluo.com/2015/12/06/浅析上下文无关文法/</id>
    <published>2015-12-06T14:07:51.000Z</published>
    <updated>2015-12-06T14:52:12.000Z</updated>
    <content type="html"><![CDATA[<p>在编译器的分析部分，需要使用一种表示方法用于描述程序语言的语法，上下文无关文法是表示方法中的一种。</p>
<h4 id="文法定义">文法定义</h4><h5 id="组成要素">组成要素</h5><p>一个上下文无关文法由四个元素组成：</p>
<ul>
<li>一个终结符号集合，终结符号是文法中最基本的符号，可以将其理解为最小的符号，有时也称为词法单元</li>
<li>一个非终结符号集合，又称「语法变量」，是终结符号的集合</li>
<li>一个产生式集合，产生式用来表示某种构造的书写形式，由产生式头，箭头，产生式体组成，稍后会有详细介绍</li>
<li>一个开始符号，此符号为非终结符号</li>
</ul>
<h5 id="产生式">产生式</h5><p>以 JAVA 语句为例子，一个 if-else 的语句一般是以下形式：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="type">expr</span>) <span class="type">stmt</span> <span class="keyword">else</span> <span class="type">stmt</span></span><br></pre></td></tr></table></figure>
<p>上述语句可以用一个产生式表示为：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">stmt </span>-&gt; <span class="preprocessor">if</span> (expr) <span class="keyword">stmt </span><span class="preprocessor">else</span> <span class="keyword">stmt</span></span><br></pre></td></tr></table></figure>
<p>这是一个语句的描述，其中 if，else 称为终结符号，可以由一个词法单元表示。expr，stmt 属于非终结符号，因为其可以由另一个产生式表示。</p>
<p>举个简单的例子，接下来通过上下文无关文法描述一个简单的语法–乘除过程 p：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p     -&gt; p * digit</span><br><span class="line">p     -&gt; p / digit</span><br><span class="line">p     -&gt; digit</span><br><span class="line">digit -&gt; <span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[在编译器的分析部分，需要使用一种表示方法用于描述程序语言的语法，上下文无关文法是表示方法中的一种。]]>
    
    </summary>
    
      <category term="上下文无关文法" scheme="http://blog.smalldragonluo.com/tags/%E4%B8%8A%E4%B8%8B%E6%96%87%E6%97%A0%E5%85%B3%E6%96%87%E6%B3%95/"/>
    
      <category term="编译器" scheme="http://blog.smalldragonluo.com/tags/%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="编译" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Designed By smalldragonluo]]></title>
    <link href="http://blog.smalldragonluo.com/2015/12/05/Designed%20By%20smalldragonluo/"/>
    <id>http://blog.smalldragonluo.com/2015/12/05/Designed By smalldragonluo/</id>
    <published>2015-12-05T08:24:29.000Z</published>
    <updated>2015-12-05T10:59:55.000Z</updated>
    <content type="html"><![CDATA[<p>这是一款我在大学设计的 APP UI，现在看来，还有许多细节不够好，但毕竟是自己的… 儿子？噢，这个比喻不太好，我其实是想表达：虽然设计平庸，但好歹是一点一滴创造出来的，我应该给他留下回忆。</p>
<p>一开始想这样</p>
<p><img src="/assets/app.jpg" alt=""></p>
<p>后来改成了</p>
<p><img src="/assets/index.png" alt=""></p>
<p>再后来改成了</p>
<p><img src="/assets/index2.png" alt=""></p>
<p>菜单</p>
<p><img src="/assets/menu.png" alt=""></p>
<p>订单列表</p>
<p><img src="/assets/order.png" alt=""></p>
<p>订单详情</p>
<p><img src="/assets/order_detail.png" alt=""></p>
<p>个人主页</p>
<p><img src="/assets/personal.png" alt=""></p>
<p>IM</p>
<p><img src="/assets/talk.png" alt=""></p>
<p><img src="/assets/confirm.png" alt=""></p>
<p><img src="/assets/map.png" alt=""></p>
<p><img src="/assets/opt.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[这是一款我在大学设计的 APP UI，现在看来，还有许多细节不够好，但毕竟是自己的... 儿子？噢，这个比喻不太好，我其实是想表达：虽然设计平庸，但好歹是一点一滴创造出来的，我应该给他留下回忆。]]>
    
    </summary>
    
      <category term="UI设计" scheme="http://blog.smalldragonluo.com/tags/UI%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="UI设计" scheme="http://blog.smalldragonluo.com/categories/UI%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个编译器的主要流程]]></title>
    <link href="http://blog.smalldragonluo.com/2015/12/03/%E4%B8%80%E4%B8%AA%E7%BC%96%E8%AF%91%E5%99%A8%E7%9A%84%E4%B8%BB%E8%A6%81%E6%B5%81%E7%A8%8B/"/>
    <id>http://blog.smalldragonluo.com/2015/12/03/一个编译器的主要流程/</id>
    <published>2015-12-03T09:51:29.000Z</published>
    <updated>2015-12-04T02:00:33.000Z</updated>
    <content type="html"><![CDATA[<h4 id="编译器简介">编译器简介</h4><p>编译器的作用是将源程序翻译成另一种语言，例如，将 JAVA 代码编译为二进制 .class 文件以跨平台运行，将 JSP 文件编译成 Servlet 代码，将 HTML 模板编译为 JavaScript 代码，这和解释型语言（几乎所有的脚本语言）有所不同，后者是在运行时直接解释运行。<br>编译器的设计目标是：</p>
<ul>
<li><p>极致的性能优化，这通常是最具挑战的目标</p>
</li>
<li><p>高效编译，即编译应该控制在合理的时间内</p>
</li>
<li><p>正确的优化，即不能改变源程序的含义</p>
</li>
</ul>
<p>一个语言的编译器分为两个部分，一个是分析部分，一个是综合部分，我们称分析部分为编译器的前端，综合部分为编译器的后端。分析部分包括：</p>
<h4 id="分析部分">分析部分</h4><ul>
<li><p>词法分析<br>这一步将源程序组织成词素序列，并输出词法单元，词法单元类似 &lt;id, index&gt;，index 为符号表对应的索引。</p>
</li>
<li><p>语法分析<br>根据词法单元生成可表示语法结构的中间形式，例如语法树，这个步骤会帮助编译器在接下来的过程中对源程序进行分析。</p>
</li>
<li><p>语义分析<br>这一步骤会做类型检查，如果出现类型错误，编译器会在这个阶段发现。如果程序语言支持自动类型转换，会将某些数据类型做转换。这一阶段会分析更加细致的语义信息，并补充符号表或语法树。</p>
</li>
</ul>
<h4 id="综合部分">综合部分</h4><p>这一部分会做很多更加复杂的工作，包括中间代码生成（生成中间表示会存在整个编译周期）和优化工作。随着计算机架构的不断更新，多核 CPU 的出现，如何使计算机指令执行效率得到提高，充分利用机器性能成为编译器的目标与挑战。<br>这一阶段会生成易于生成，易于翻译成目标机器代码的中间代码，例如『三地址代码』：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">t1 = <span class="value">inttofloat(<span class="number">60</span>)</span></span></span><br><span class="line"><span class="setting">t2 = <span class="value">id3 * t1</span></span></span><br><span class="line"><span class="setting">t3 = <span class="value">id2 + t2</span></span></span><br><span class="line"><span class="setting">id1 = <span class="value">t3</span></span></span><br></pre></td></tr></table></figure>
<p>并优化，生成目标语言，如汇编语言。然后由汇编器生成目标机器代码。</p>
<p>通常，在分析部分开始之前，还会有预处理器，所做的工作是将『宏』转换到代码语句中。</p>
]]></content>
    <summary type="html">
    <![CDATA[编译器的作用是将源程序翻译成另一种语言，例如，将 JAVA 代码编译为二进制 .class 文件以跨平台运行，将 JSP 文件编译成 Servlet 代码，将 HTML 模板编译为 JavaScript 代码，这和解释型语言（几乎所有的脚本语言）有所不同，后者是在运行时直接解释运行。]]>
    
    </summary>
    
      <category term="编译器" scheme="http://blog.smalldragonluo.com/tags/%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="编译" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Process-Killer，an Alfred Workflow]]></title>
    <link href="http://blog.smalldragonluo.com/2015/11/29/Process-Killer%20%E4%B8%80%E4%B8%AA%20Alfred%20Workflow/"/>
    <id>http://blog.smalldragonluo.com/2015/11/29/Process-Killer 一个 Alfred Workflow/</id>
    <published>2015-11-29T12:39:00.000Z</published>
    <updated>2015-12-06T14:19:03.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://www.alfredapp.com/" target="_blank" rel="external">Alfred</a> 是一个 Mac 上的效率工具，官网对其的定义是：</p>
<blockquote>
<p>Alfred is an award-winning app for Mac OS X which boosts your efficiency with hotkeys and keywords. Search your Mac and the web effortlessly, and control your Mac using customised actions with the Powerpack.<br>Alfred 是一个 Mac 上的获奖应用，可以通过快捷键和关键字提高你的效率，除此之外，还可以高效地搜索本地和网络，通过 Powerpack 自定义动作控制你的电脑。</p>
</blockquote>
<h4 id="什么是_Process-Killer？">什么是 Process-Killer？</h4><p>回到正题，Process-Killer 是一个我编写的 Alfred 插件（其准确的定义应该是 <strong>customised actions</strong>），功能是根据你输入的进程名称或者 PID 或者端口号结束对应进程。</p>
<p>例如</p>
<p><img src="https://camo.githubusercontent.com/a2e1ceee9d2199adcca3a9f3118da1682d8cc4a7/68747470733a2f2f696d672e616c6963646e2e636f6d2f7470732f5442314b5545414b465858585861735870585858585858585858582d3538342d3232332e6a7067" alt=""></p>
<p>如你所见，输入关键字 kill，会进入匹配模式，你可以输入进程名称，PID 或者 -i 端口号，列表会显输出对应的进程，选中并确定，一个进程就将殒命，消失于宇宙的浩瀚之中（我决定以后给他加上一声惨叫，当然这是开玩笑的）。<br>你可能注意到，每个 item 的下方会显示此进程运行的参数，这对于运行多个相同的命令来说是很有帮助的。例如你打开了多个 Node.js 进程，通过这个插件可以很方便地进行区分。</p>
<h4 id="Install">Install</h4><p>如何安装呢？</p>
<ol>
<li>首先查看 <a href="https://github.com/smalldragonluo/process-killer" target="_blank" rel="external">Process-Killer</a> 仓库，下载 <strong>Process Killer.alfredworkflow</strong> 文件</li>
<li>打开 Alfred 面板，点设置，进入 Workflow，将 <strong>Process Killer.alfredworkflow</strong> 拖入左侧列表，至此，安装完成，就是这么轻松，就是这么简单。</li>
</ol>
<h4 id="工作原理">工作原理</h4><p>这个插件使用了 Node.js 作为开发语言，具体工作流程打开 Alfred 面板可以看到：</p>
<p><img src="/assets/C6671052-55E6-4EEA-A5EE-FCD9C8D93E17.png" alt=""></p>
<p>看到这里你肯定会惊讶：『这个图标真他妈好看』。真不好意思，这是我画的，你可以在其他产品中使用这枚图标，这是免费的。</p>
<h5 id="内容过滤">内容过滤</h5><p>插件的入口是一个 Script Filter，顾名思义，是一个脚本过滤器，用于生成可以显示在面板的内容，出此之外还有 keyword，File Filter 等。</p>
<p>首先，Script Filter 通过 shell 调用了 Node.js 服务</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/<span class="keyword">node</span><span class="identifier"> </span><span class="title">&lt;&lt;-'CODE</span>'</span><br><span class="line">require(<span class="string">"./processFilter"</span>)(<span class="string">"&#123;query&#125;"</span>);</span><br><span class="line">CODE</span><br></pre></td></tr></table></figure>
<p>其中，<code>query</code> 是面板传递的参数，这一步的目地是要通过 Node.js 生成可供面板显示的内容数据，输出格式为 XML，这里我使用了 <a href="http://npm.taobao.org/package/xtpl" target="_blank" rel="external">xtpl</a> 来输出，XML 格式大家看代码就知道意思了。<br>我还是提一下吧，我并不是为了凑字数。一个简单的 XML 格式是这样的：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">items</span>&gt;</span></span><br><span class="line">  &#123;&#123;#each(items)&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="title">item</span> <span class="attribute">uid</span>=<span class="value">"&#123;&#123;name&#125;&#125;"</span> <span class="attribute">arg</span>=<span class="value">"&#123;&#123;pid&#125;&#125;"</span> <span class="attribute">valid</span>=<span class="value">"yes"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">subtitle</span>&gt;</span>&#123;&#123;args&#125;&#125;<span class="tag">&lt;/<span class="title">subtitle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">icon</span> &#123;&#123;#<span class="attribute">if</span>(<span class="attribute">isApp</span>)&#125;&#125;<span class="attribute">type</span>=<span class="value">"fileicon"</span><span class="value">&#123;&#123;</span>/<span class="attribute">if</span>&#125;&#125;&gt;</span>&#123;&#123;icon&#125;&#125;<span class="tag">&lt;/<span class="title">icon</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line">  &#123;&#123;/each&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">items</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中，uid 是用来标记 item 的唯一属性，选择次数越多，会越将其靠前显示；arg 是传递到下一步的参数；valid 代表可以选定，你可以输出一个不可选定的 item 用来提示用户信息。<br><code>type=&quot;fileicon&quot;</code> 说明这是一个应用，可以直接使用 APP 的图标，value 为 APP 路径。</p>
<p>如何抽出进程的 command 与 args 是个问题，因为 shell 输出的字段以空格分割，而 command 本身也包含空格，因此我使用 child_process 执行了两次 ps 命令，分别取出 command 与 args，并将 args 做为 map 通过 PID 查询。  </p>
<h5 id="执行动作">执行动作</h5><p>Run Script 步骤会接受某个 item 的参数 arg，这个 item 是面板选定的元素。接下来执行另一段代码：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/<span class="keyword">node</span><span class="identifier"> </span><span class="title">&lt;&lt;-'CODE</span>'</span><br><span class="line">require(<span class="string">"./action"</span>)(<span class="string">"&#123;query&#125;"</span>);</span><br><span class="line">CODE</span><br></pre></td></tr></table></figure>
<p>这段代码会根据 PID，对此进程发送信号 <strong>TERM(termination signal)</strong>，5 秒后发送信号 <strong>KILL(non-ignorable kill)</strong>。</p>
<h4 id="后记">后记</h4><p>其实，我并不用太多 Alfred 的功能，大部分自带的 Spotlight 也能做，唯一使用的就只有 Workflows 了，这对开发来说还是比较方便的，希望这个插件可以帮助到你~</p>
<h4 id="参考链接">参考链接</h4><p><a href="https://developer.apple.com/library/prerelease/mac/documentation/Darwin/Reference/ManPages/man1/ps.1.html" target="_blank" rel="external">ps(1) Mac OS X Manual Page</a><br><a href="http://computers.tutsplus.com/tutorials/alfred-workflows-for-advanced-users--mac-60963" target="_blank" rel="external">Alfred Workflows for Advanced Users</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://www.alfredapp.com/" target="_blank" rel="external">Alfred</a> 是一个 Mac 上的效率工具，官网对其的定义是：</p>
<blockquote>
<p>Alfred is an ]]>
    </summary>
    
      <category term="Alfred" scheme="http://blog.smalldragonluo.com/tags/Alfred/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="实用工具" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 NodeBB 搭建论坛]]></title>
    <link href="http://blog.smalldragonluo.com/2015/11/20/%E4%BD%BF%E7%94%A8%20NodeBB%20%E6%90%AD%E5%BB%BA%E8%AE%BA%E5%9D%9B/"/>
    <id>http://blog.smalldragonluo.com/2015/11/20/使用 NodeBB 搭建论坛/</id>
    <published>2015-11-20T14:00:50.000Z</published>
    <updated>2015-12-06T14:19:39.000Z</updated>
    <content type="html"><![CDATA[<h3 id="NodeBB">NodeBB</h3><p><a href="https://docs.nodebb.org/en/latest/" target="_blank" rel="external">NodeBB</a> 是一个基于 Node.js 的开源论坛，Metro UI 十分精美，它有以下特点：</p>
<ul>
<li>按照类目，标签，最新等进行帖子分类</li>
<li>MarkDown 支持</li>
<li>支持 WebSocket 实时推送消息</li>
<li>强大的后台管理</li>
<li>多样的皮肤</li>
<li>哈哈，我就不凑字数了</li>
</ul>
<p>虽然不如 <a href="http://www.discuz.net/forum.php" target="_blank" rel="external">Discuz</a> 功能强大，例如，没有验证码，但对于我来说已经够用了。</p>
<h3 id="ShowCase">ShowCase</h3><p>请访问 <strong><a href="//www.smalldragonluo.com">www.smalldragonluo.com</a></strong></p>
<h3 id="Install">Install</h3><p>我的 ECS 是放在阿里云，系统为 CentOS 6.5，NodeBB 的安装方式见 <a href="https://docs.nodebb.org/en/latest/installing/os/centos.html" target="_blank" rel="external">Installation by OS » CentOS 6/7</a></p>
<p>简单来说：</p>
<ul>
<li>首先需要安装 <a href="https://nodejs.org" target="_blank" rel="external">Node.js</a>，将编译好的 Node.js 放到环境变量即可</li>
<li>然后是 <a href="http://redis.io/" target="_blank" rel="external">Redis</a>，我使用的源码安装，你也可以切换成 <a href="https://www.mongodb.org/" target="_blank" rel="external">MongoDB</a>，这也是被支持的</li>
<li>哈哈，我就不凑字数了，你还是按照官方教程来吧… <a href="https://docs.nodebb.org/en/latest/installing/os/centos.html" target="_blank" rel="external">Installation by OS » CentOS 6/7</a></li>
</ul>
<p>请注意查看 NodeBB 的文档，Git 克隆下来后，先改下 NodeBB/install 里面的配置，例如修改页尾，论坛分类等等，你也可以安装后在管理界面修改</p>
<p>注意在安装 NodeBB 时可能会遇到这个错误：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ error This version of node/NAN/v8 requires a C++<span class="number">11</span> compiler</span><br></pre></td></tr></table></figure>
<p>原因是目前 CentOS 6.5 的云主机 C++ 编译器版本普遍较低，如你遇到安装时编译 mmmagic 模块报错，请升级 g++ 至 4.8 版本，包含 C++ 11。参考 <a href="http://superuser.com/questions/381160/how-to-install-gcc-4-7-x-4-8-x-on-centos" target="_blank" rel="external">CentOS g++ 4.8 install</a></p>
<h3 id="建议">建议</h3><ul>
<li>请修改 Redis 密码以防止外部攻击，或者限制 IP 访问</li>
<li>增加 Nginx，主要是为了提高静态资源性能，防止 DDos 攻击，负载均衡（就是要这么认真）</li>
<li>SFTP 我推荐一个 Mac 的软件：<a href="https://cyberduck.io/" target="_blank" rel="external">Cyberduck</a></li>
</ul>
<h3 id="吐槽">吐槽</h3><p>NodeBB 通过 node_modules 的方式提供插件，造成静态资源耦合太紧。</p>
]]></content>
    <summary type="html">
    <![CDATA[NodeBB 是一个基于 Node.js 的开源论坛，Metro UI 十分精美，它有以下特点：按照类目，标签，最新等进行帖子分类...]]>
    
    </summary>
    
      <category term="CentOS" scheme="http://blog.smalldragonluo.com/tags/CentOS/"/>
    
      <category term="Nginx" scheme="http://blog.smalldragonluo.com/tags/Nginx/"/>
    
      <category term="Node.js" scheme="http://blog.smalldragonluo.com/tags/Node-js/"/>
    
      <category term="NodeBB" scheme="http://blog.smalldragonluo.com/tags/NodeBB/"/>
    
      <category term="Redis" scheme="http://blog.smalldragonluo.com/tags/Redis/"/>
    
      <category term="论坛" scheme="http://blog.smalldragonluo.com/tags/%E8%AE%BA%E5%9D%9B/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[博客迁移]]></title>
    <link href="http://blog.smalldragonluo.com/2015/11/10/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    <id>http://blog.smalldragonluo.com/2015/11/10/博客迁移/</id>
    <published>2015-11-10T06:11:44.000Z</published>
    <updated>2015-12-06T14:19:03.000Z</updated>
    <content type="html"><![CDATA[<p>&ensp;&ensp;今天折腾了下 <a href="https://hexo.io/zh-cn/" target="_blank" rel="external">hexo</a>，顺便把博客迁移到 <a href="//blog.smalldragonluo.com">blog.smalldragonluo.com</a>，从今天起就在这里安家啦~</p>
<p>&ensp;&ensp;服务器是 GitHub Pages，通过 CNAME 解析到 GitHub 服务器，其实对于我这种日 PV 还在个位数的博客来讲，放哪里都一样，而且 GitHub Pages 还慢，唯一的好处大概就是自带版本控制了吧。</p>
<p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">hexo</a> 有插件可以一键部署到服务器，因此还是挺方便的。</p>
<p>&ensp;&ensp;刚把主题换成 <a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="external">Maupassant</a>，看起来还不错，比较符合我低调奢华的风格。</p>
<p>&ensp;&ensp;以一句短小精悍的 javascript 代码做结语吧：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello world.'</span>);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[从今天起就在这里安家啦~]]>
    
    </summary>
    
      <category term="GitHub" scheme="http://blog.smalldragonluo.com/tags/GitHub/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[安卓 UC 内核 WebView 调试]]></title>
    <link href="http://blog.smalldragonluo.com/2015/09/24/%E5%AE%89%E5%8D%93%20UC%20%E5%86%85%E6%A0%B8%20WebView%20%E8%B0%83%E8%AF%95/"/>
    <id>http://blog.smalldragonluo.com/2015/09/24/安卓 UC 内核 WebView 调试/</id>
    <published>2015-09-24T07:57:40.000Z</published>
    <updated>2015-12-06T14:19:03.000Z</updated>
    <content type="html"><![CDATA[<h3 id="不同的调试方式">不同的调试方式</h3><p>个人的调试方式有这么几种：</p>
<ol>
<li>Chrome Emulator</li>
<li>手机端浏览器调试</li>
<li>手机端 Chrome + Inspector 调试（或者其他工具）</li>
<li>客户端 + Inspector 调试</li>
</ol>
<p>由于目前的 Chrome Emulator 渲染方式和手机端各浏览器并不是十分一致，因此这种方式适用于前期快速开发原型，在此之后，再转到真机或虚拟机浏览器调试。</p>
<p>此时此刻你很希望像 PC 那样可以使用 Debugger，高版本的 Chrome 提供了 Inspector ( 桌面端访问 chrome://inspect )，将设备与电脑通过 USB 线连接，并打开移动端 Chrome，可以看到如下所示内容：</p>
<p><img src="https://img.alicdn.com/tps/TB1lW2jJFXXXXbYXFXXXXXXXXXX-663-335.jpg" alt="chrome inspect界面"></p>
<p>点击 inspect 即可进行调试</p>
<h3 id="移动端_WebView_调试">移动端 WebView 调试</h3><p>当你要查看在客户端的真实情况，异常捕获，或者你需要使用 JSBridge，以及其他能力（例如拉出登陆框、分享等），一个真实的环境会为开发带来很多便利。</p>
<p>参考 UC 浏览器的调试：</p>
<ol>
<li>安装 ADB ( 安卓调试桥 )</li>
<li>安装 APP 开发者版</li>
<li>访问 UC 内置的 Debug 服务器</li>
</ol>
<p>安装 ADB 是为了连接电脑与设备，使用其提供的端口映射功能（将本地端口映射到移动端本地端口），开发者版手淘内部会启动一个调试服务器（当启动WebView），端口为 9998，你可以访问此服务器来调试。</p>
<p>那么走一遍流程</p>
<h5 id="1-_安装_ADB">1. 安装 ADB</h5><p>ADB 包含到 Android SDK 里，所以我们先安装 Android SDK，你可以使用 HomeBrew 快速安装 <code>$ brew install android-sdk</code>，或者开启人工智能模式 <a href="http://developer.android.com/sdk/installing/index.html?pkg=tools" target="_blank" rel="external">Android SDK</a></p>
<blockquote>
<p>我不确定 ADB 是否需要 JDK（严格来说只有开发阶段才会用到 JDK，如果需要也应该是 JRE 才对），我已经安装了 Java，如果不是拿刀架在我脖子上，我是肯定不会卸载了测试下的，遇到问题的同学可以点这个 <a href="https://www.java.com/" target="_blank" rel="external">Java</a></p>
</blockquote>
<p>我使用的 brew 安装，安装完遇到的第一个问题就是 执行 <code>adb</code> 找不到 Platform-tools，原因是 SDK 并未包含 Platform-tools 包，此时你需要 <code>$ open /usr/local/opt/android-sdk</code> 找到 tools 目录下的 android，执行它，会弹出 SDK 管理器，并安装 Platform-tools。</p>
<p>如果遇到 log 提示 “Failed to fetch URL https://…” 是因为 https 不可用（why?），此时点击工具栏 preferences，勾选 “Force https://… sources to be fetched using http://…” 即可。</p>
<p>这时执行 <code>$ adb devices</code>，应该可以看到有设备连接了，如果没有，执行</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ adb <span class="operator"><span class="keyword">kill</span>-<span class="keyword">server</span></span><br><span class="line">$ adb <span class="keyword">start</span>-<span class="keyword">server</span></span></span><br></pre></td></tr></table></figure>
<p>并重新连接 USB</p>
<h5 id="2-_安装开发者版_APP">2. 安装开发者版 APP</h5><p>略</p>
<h5 id="3-_开始_Debug">3. 开始 Debug</h5><p>手机打开任意页面，连接设备后，执行 <code>$ adb forward tcp:端口号 tcp:9998</code> 这时访问 127.0.0.1:端口号，会被代理到移动端 127.0.0.1:9998，这时就可以愉快的 Debug 了。</p>
<p><img src="https://img.alicdn.com/tps/TB16.fEJFXXXXbFXXXXXXXXXXXX-858-243.jpg" alt="debug界面"></p>
<p>你也可以无线 Debug，移动端连接 WIFI，并连接设备，执行 <code>adb shell ifconfig wlan0</code> 获得设备 IP， 这时可以断开 USB，开始无线调试（你可以权衡下是否需要这么做）。</p>
<h3 id="Troubleshooting">Troubleshooting</h3><ol>
<li><p><strong>浏览器一直 pending</strong></p>
<ul>
<li>解决方法：彻底清理 APP 后台，重启应用（内置调试服务挂掉了）</li>
</ul>
</li>
<li><p><strong>移动端一直打开页面失败</strong></p>
<ul>
<li>试试清理应用缓存，还不行就清理数据（只试了几百次就找到了解决办法）</li>
</ul>
</li>
</ol>
<h3 id="最佳实践">最佳实践</h3><p>将移动端代理设为localhost:电脑代理端口，并开启 chrome inspect，打开端口映射(port forwarding)，这与 adb 的映射正好反向，是将客户端的本地端口映射到 PC，这时可以使用 PC 的系统代理（你也可以手动输入IP）</p>
]]></content>
    <summary type="html">
    <![CDATA[个人的调试方式有这么几种： 1. Chrome Emulator 2. 手机端浏览器调试 3. 手机端 Chrome + Inspector 调试（或者其他工具） 4. 手淘 + Inspector 调试]]>
    
    </summary>
    
      <category term="UC" scheme="http://blog.smalldragonluo.com/tags/UC/"/>
    
      <category term="WebView" scheme="http://blog.smalldragonluo.com/tags/WebView/"/>
    
      <category term="移动端调试" scheme="http://blog.smalldragonluo.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="调试" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何避免模块间的 CSS 冲突]]></title>
    <link href="http://blog.smalldragonluo.com/2015/06/05/%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%A8%A1%E5%9D%97%E9%97%B4%E7%9A%84CSS%E5%86%B2%E7%AA%81/"/>
    <id>http://blog.smalldragonluo.com/2015/06/05/如何避免模块间的CSS冲突/</id>
    <published>2015-06-05T14:19:00.000Z</published>
    <updated>2015-12-06T14:19:03.000Z</updated>
    <content type="html"><![CDATA[<h4 id="问题">问题</h4><p>在最近的推荐模块改版中，遇到了一个模块之间的样式冲突问题，特在这里记录一下自己的心得。<br>那是一个阳光明媚的下午，我像往常一样在工位上写代码，窗外的麻雀在电线杆上多嘴。这一天，仿佛将会像往日一样平静地过去。<br>突然，我的聊天工具惨叫一声：“叮咚！”是测试同学发来的消息，我知道，这一切没有想象中那么简单。 屏幕中浮现出15个黑色的小字：推荐模块样式有问题。<br>“怎么可能？我明明仔细测试过了，不应该啊…… 不行，他一定是在骗我。”那一刻我的内心几乎是崩溃的，我开始自怨自艾，想逃离这种喧嚣，可是，责任告诉我，我不能就这么坐着什么也不做，于是我立即把状态设为隐身。</p>
<h4 id="原因">原因</h4><p>事件的起因就是推荐模块的图标样式被页面的另一个模块覆写了，添加了 padding-left： 20px; 所用的图标 class 为 icon</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0605/220524_Xrxf_992034.png" alt=""></p>
<p>另一个模块定义了 .icon 样式</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0605/220836_0KQx_992034.png" alt=""></p>
<p>仔细一看，原来是收藏夹页面的基础样式，看来是自己对页面样式环境不熟悉所致。顺便，我又查看了另一个页面，发现也有类似css样式</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0605/220949_z4X4_992034.png" alt=""></p>
<p>可想而知，如果以后要在其他页面编写区块，还会遇到这种问题。</p>
<p>对应页面的前端同学告诉我，你起的class名字太简单大众了，难怪会起冲突，需要加上前缀啊混蛋。</p>
<p>想想也不是没有道理，这样是可以在一定程度上解决这类问题，不过我还是有一些疑惑，既然这些各页面的基础样式也不是通用的，而且还有差异，为什么不充分利用派生选择器添加命名空间或者添加前缀呢？这样带来的问题就是每个区块开发者都要事先看一遍页面的基础样式，发现潜在的冲突，或者不看，测试的时候让测试同学帮忙看，或者所有class添加前缀，显得冗余。</p>
<h4 id="如何解决这类问题？">如何解决这类问题？</h4><p>我觉得多人协作页面开发还是应该遵循一些css规范，比如： </p>
<ol>
<li><p>首先不能影响别人</p>
<ol>
<li><p>对于模块开发者，他不需要关心除了全局样式框架之外的任何 class 冲突问题，模块的样式都是在顶部模块class基础上派生，这也保证了不会影响其他模块</p>
</li>
<li><p>对于样式框架开发者（或者各页面的base.css），你可以定义样式模型，但你必须考虑到模型内部可能会嵌套他人的模块，因此模型以及模型内部元素class必须带上完整的层次结构，例如：</p>
</li>
</ol>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.module-a</span> <span class="rules">&#123;&#125;</span></span><br><span class="line"><span class="class">.module-a-head</span> <span class="rules">&#123;&#125;</span></span><br><span class="line"><span class="class">.module-a-body</span> <span class="rules">&#123;&#125;</span></span><br><span class="line"><span class="class">.module-a-body-xx</span> <span class="rules">&#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p>如某网站头部的html结构</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0605/221234_2V5I_992034.png" alt=""></p>
<p>这样既保证了不会影响内部模块，也不会被内部模块的派生式样式所影响。虽然这样带来了一定的html代码量增加，不过却是值得的，因为你没办法保证模型内部不会出现class为head的元素，所以你不能像模块开发者一样使用：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.module-a &#123;</span><br><span class="line">  .head &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果需要继承某个样式模型，可以使用覆盖式class扩展的方式，例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"module-a module-a-can_fly"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.module-a-can_fly</span> <span class="rules">&#123; <span class="comment">/* 我是覆盖样式，只有帅气的人才看得到 */</span> &#125;</span></span><br></pre></td></tr></table></figure>
<p>这保留了元素的类型信息，便于脚本操作。</p>
<ol>
<li><p>不能被别人影响</p>
<ol>
<li><p>模块开发者需要 reset 可继承样式，例如 text-align, line-height, color 等，不然当区块被引入到另外的页面时，结果可能不是你想要的。</p>
</li>
<li><p>如果页面未遵循第一条第二点，那么你应该那么做。</p>
</li>
</ol>
</li>
</ol>
<p>说的不对的地方请大大们指出 ：）</p>
]]></content>
    <summary type="html">
    <![CDATA[在最近的推荐模块改版中，遇到了一个模块之间的样式冲突问题，特在这里记录一下自己的心得。那是一个阳光明媚的下午，我像往常一样在工位上写代码，窗外的麻雀在电线杆上多嘴。这一天，仿佛将会像往日一样平静地过去。]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.smalldragonluo.com/tags/CSS/"/>
    
      <category term="样式冲突" scheme="http://blog.smalldragonluo.com/tags/%E6%A0%B7%E5%BC%8F%E5%86%B2%E7%AA%81/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery 选择器性能发现]]></title>
    <link href="http://blog.smalldragonluo.com/2015/03/09/jQuery-%E9%80%89%E6%8B%A9%E5%99%A8%E6%80%A7%E8%83%BD%E5%8F%91%E7%8E%B0/"/>
    <id>http://blog.smalldragonluo.com/2015/03/09/jQuery-选择器性能发现/</id>
    <published>2015-03-09T08:43:00.000Z</published>
    <updated>2015-12-06T14:19:03.000Z</updated>
    <content type="html"><![CDATA[<p>我做过假设，jQuery的find方法比传入整个选择器慢（上下文差距在一层以内），做出这种假设的原因是querySelectorAll等原生方法会比js实现快。今天发现并不是这样。经测试，在chrome中，此段代码产生如下结果：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mv = $(<span class="string">'#container'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i ++) &#123;</span><br><span class="line">    $(<span class="string">'#container a'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'t'</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'t'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i ++) &#123;</span><br><span class="line">    mv.find(<span class="string">'a'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'t'</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span>: <span class="string">302.646ms</span></span><br><span class="line"><span class="attribute">a</span>: <span class="string">131.653ms</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[我做过假设，jQuery的find方法比传入整个选择器慢（上下文差距在一层以内），做出这种假设的原因是querySelectorAll等原生方法会比js实现快。今天发现并不是这样。经测试，在chrome中，此段代码产生如下结果：]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.smalldragonluo.com/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://blog.smalldragonluo.com/tags/jQuery/"/>
    
      <category term="性能" scheme="http://blog.smalldragonluo.com/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="选择器" scheme="http://blog.smalldragonluo.com/tags/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[「转」 UNICODE 与 UTF-8，UTF-16 的含义]]></title>
    <link href="http://blog.smalldragonluo.com/2015/01/08/%5B%E8%BD%AC%5D%20UNICODE-%E4%B8%8E-UTF8%EF%BC%8CUTF16-%E7%9A%84%E5%90%AB%E4%B9%89/"/>
    <id>http://blog.smalldragonluo.com/2015/01/08/[转] UNICODE-与-UTF8，UTF16-的含义/</id>
    <published>2015-01-08T08:57:00.000Z</published>
    <updated>2016-01-28T12:55:13.000Z</updated>
    <content type="html"><![CDATA[<p>最初，Internet上只有一种字符集——ANSI的ASCII字符集(American Standard Code for Information Interchange， 美国信息交换标准码），它使用7 bits来表示一个字符，总共表示128个字符，后来IBM公司在此基础上进行了扩展，用8bit来表示一个字符，总共可以表示256个字符，充分利用了一个字节所能表达的最大信息</p>
<h4 id="ANSI字符集">ANSI字符集</h4><p>ASCII字符集，以及由此派生并兼容的字符集，如：GB2312，正式的名称为MBCS（Multi-Byte Chactacter System，多字节字符系统），通常也称为ANSI字符集。</p>
<p>UNICODE 与 UTF8，UTF16 </p>
<p>由于每种语言都制定了自己的字符集，导致最后存在的各种字符集实在太多，在国际交流中要经常转换字符集非常不便。因此，产生了Unicode字符集，它固定使用16 bits（两个字节）来表示一个字符，共可以表示65536个字符<br>标准的Unicode称为UTF-16(UTF:UCS Transformation Format )。后来为了双字节的Unicode能够在现存的处理单字节的系统上正确传输，出现了UTF-8，使用类似MBCS的方式对Unicode进行编码 (Unicode字符集有多种编码形式)。例如“连通”两个字的Unicode标准编码UTF-16 (big endian）为：</p>
<p>DE 8F 1A 90</p>
<p>而其UTF-8编码为：</p>
<p>E8 BF 9E E9 80 9A</p>
<p>当一个软件打开一个文本时，它要做的第一件事是决定这个文本究竟是使用哪种字符集的哪种编码保存的。软件一般采用三种方式来决定文本的字符集和编码：<br>检测文件头标识，提示用户选择，根据一定的规则猜测最标准的途径是检测文本最开头的几个字节，开头字节Charset/encoding，如下表：</p>
<p>EF BB BF      UTF-8<br>FE FF         UTF-16/UCS-2, little endian<br>FF FE         UTF-16/UCS-2, big endian<br>FF FE 00 00   UTF-32/UCS-4, little endian<br>00 00 FE FF   UTF-32/UCS-4, big-endian</p>
<h4 id="Unicode">Unicode</h4><p>unicode.org 制定的编码机制， 要将全世界常用文字都函括进去。在 1.0 中是 16 位编码， 由 U+0000 到 U+FFFF。 每个 2byte 码对应一个字符; 在 2.0 开始抛弃了 16 位限制， 原来的 16 位作为基本位平面， 另外增加了 16 个位平面， 相当于 20 位编码， 编码范围 0 到 0x10FFFF。</p>
<h4 id="UCS">UCS</h4><p>ISO 制定的 ISO10646 标准所定义的 Universal Character Set， 采用4byte编码。</p>
<p>Unicode 与 UCS 的关系:</p>
<p>ISO 与 unicode.org 是两个不同的组织， 因此最初制定了不同的标准; 但自从unicode2.0开始， unicode 采用了与 ISO 10646-1 相同的字库和字码， ISO 也承诺 ISO10646 将不会给超出 0x10FFFF 的 UCS-4 编码赋值， 使得两者保持一致。</p>
<p>UCS的编码方式:</p>
<p>UCS-2：与 unicode 的 2byte 编码基本一样。 </p>
<p>UCS-4：4byte 编码， 目前是在 UCS-2 前加上 2 个全零的 byte。</p>
<p>UTF：Unicode/UCS<br>Transformation Format</p>
<p>UTF-8， 8bit编码， ASCII不作变换， 字符做变长编码， 每个字符 1-3 byte。<br>通常作为外码。 有以下优点:</p>
<ul>
<li>与CPU字节顺序无关， 可以在不同平台之间交流</li>
<li>容错能力高， 任何一个字节损坏后， </li>
</ul>
<p>最多只会导致一个编码码位损失， 不会链锁错误(如 GB 码错一个字节就会整行乱码) </p>
<p>UTF-16， 16bit 编码， 是变长码， 大致相当于 20 位编码， 值在 0 到 0x10FFFF 之间， 基本上就是 unicode 编码的实现。 它是变长码， 与 CPU 字序有关， 但因为最省空间，<br>常作为网络传输的外码。<br>UTF-16 是 unicode 的 preferred encoding。 </p>
<p>UTF-32，<br>仅使用了 unicode 范围( 0 到 0x10FFFF)的 32 位编码，<br>相当于UCS-4的子集。</p>
<p>UTF 与 unicode 的关系:</p>
<p>Unicode 是一个字符集，<br>可以看作为内码。<br>而UTF是一种编码方式， 它的出现是因为 unicode 不适宜在某些场合直接传输和处理。 UTF-16 直接就是 unicode 编码，<br>没有变换， 但它包含了 0x00 在编码内， 头 256 字节码的第一个 byte 都是 0x00， 在操作系统(C语言)中有特殊意义， 会引起问题。<br>采用 UTF-8 编码对 unicode 的直接编码作些变换可以避免这问题， 并带来一些优点。</p>
<h4 id="中国国标编码">中国国标编码</h4><h5 id="GB13000:">GB13000:</h5><p>完全等同于 ISO 10646-1/Unicode 2.1， 今后也将随 ISO 10646/Unicode 的标准更改而同步更改。</p>
<h5 id="GBK">GBK</h5><p>对 GB2312 的扩充， 以容纳 GB2312 字符集范围以外的 Unicode 2.1 的统一汉字部分， 并且增加了部分 unicode 中没有的字符。 </p>
<h5 id="GB18030-2000">GB18030-2000</h5><p>基于 GB13000， 作为Unicode 3.0 的 GBK 扩展版本， 覆盖了所有 unicode 编码，<br>地位等同于 UTF-8， UTF-16， 是一种 unicode 编码形式。 变长编码， 用单字节/双字节/4字节对字符编码。<br>GB18030 向下兼容 GB2312/GBK。<br>GB18030 是中国所有非手持/嵌入式计算机系统的强制实施标准。</p>
<p><a href="http://fjzboy。blog。sohu。com/136319844.html" target="_blank" rel="external">原文链接</a></p>
]]></content>
    <summary type="html">
    <![CDATA[最初，Internet上只有一种字符集——ANSI的ASCII字符集(American Standard Code for Information Interchange， 美国信息交换标准码），它使用7 bits来表示一个字符，总共表示128个字符，后来IBM公司在此基础上进行了扩展，用8bit来表示一个字符，总共可以表示256个字符，充分利用了一个字节所能表达的最大信息。]]>
    
    </summary>
    
      <category term="字符编码" scheme="http://blog.smalldragonluo.com/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    
      <category term="字符集" scheme="http://blog.smalldragonluo.com/tags/%E5%AD%97%E7%AC%A6%E9%9B%86/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="计算机" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery.access 的作用]]></title>
    <link href="http://blog.smalldragonluo.com/2015/01/08/jQuery-access-%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://blog.smalldragonluo.com/2015/01/08/jQuery-access-的作用/</id>
    <published>2015-01-08T08:54:00.000Z</published>
    <updated>2015-12-06T14:19:03.000Z</updated>
    <content type="html"><![CDATA[<p>jQuery.access为attr， prop， css， html等方法提供通用的键值设置 / 读取方法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于设置和获取集合的值的多用途方法</span></span><br><span class="line"><span class="comment">// 当value/s为function时，可以被选择地执行</span></span><br><span class="line">access: <span class="function"><span class="keyword">function</span>(<span class="params">elems, fn, key, value, chainable, emptyGet, pass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> exec,</span><br><span class="line">    bulk = key == <span class="literal">null</span>,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    length = elems.length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果key是属性集合，分多次为elements设置所有属性</span></span><br><span class="line">  <span class="keyword">if</span> (key &amp;&amp; <span class="keyword">typeof</span> key === <span class="string">"object"</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> key) &#123;</span><br><span class="line">      jQuery.access(elems, fn, i, key[i], <span class="number">1</span>, emptyGet, value);</span><br><span class="line">    &#125;</span><br><span class="line">    chainable = <span class="number">1</span>; <span class="comment">//此次调用为非get属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是单个属性，且value不为空（此次调用为非get属性）</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">//value是否为可执行函数（如果是，则设置value为将element传入function执行后的返回值，否则为固定值）</span></span><br><span class="line">    exec = pass === <span class="literal">undefined</span> &amp;&amp; jQuery.isFunction(value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果未指定key，则具体的key依赖fn</span></span><br><span class="line">    <span class="keyword">if</span> (bulk) &#123;</span><br><span class="line">      <span class="comment">// 如果需要设置的value依赖function执行后的返回值，则包装fn，将其上下文变为单个element，在#1处处理</span></span><br><span class="line">      <span class="keyword">if</span> (exec) &#123;</span><br><span class="line">        exec = fn;</span><br><span class="line">        fn = <span class="function"><span class="keyword">function</span>(<span class="params">elem, key, value</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> exec.call(jQuery(elem), value);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 否则，fn上下文设为全部elements（jQuery对象），在此处处理</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fn.call(elems, value);</span><br><span class="line">        fn = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果还未处理 #1</span></span><br><span class="line">    <span class="keyword">if</span> (fn) &#123;</span><br><span class="line">      <span class="keyword">for</span> (; i &lt; length; i++) &#123;</span><br><span class="line">        fn(elems[i], key, exec ? value.call(elems[i], i, fn(elems[i], key)) : value, pass);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    chainable = <span class="number">1</span>; <span class="comment">//此次调用为非get属性</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> chainable ?</span><br><span class="line">    elems :</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为get调用，返回get值或指定空值</span></span><br><span class="line">    bulk ?</span><br><span class="line">    fn.call(elems) :</span><br><span class="line">    length ? fn(elems[<span class="number">0</span>], key) : emptyGet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[jQuery.access 为 attr， prop， css， html等方法提供通用的键值设置 / 读取方法]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.smalldragonluo.com/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://blog.smalldragonluo.com/tags/jQuery/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IE中的 Bug 们之 box-shadow 无效]]></title>
    <link href="http://blog.smalldragonluo.com/2014/09/26/IE%E4%B8%AD%E7%9A%84Bug%E4%BB%AC-%E4%B9%8B-box-shadow%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.smalldragonluo.com/2014/09/26/IE中的Bug们-之-box-shadow无效问题/</id>
    <published>2014-09-26T08:59:00.000Z</published>
    <updated>2015-12-06T14:19:03.000Z</updated>
    <content type="html"><![CDATA[<p>测试半小时，我终于捉住了这只Bug。</p>
<p>内容如下：</p>
<p>在 IE 中，如果元素 display 为 table 且 border-collapse 为 collapse，其 box-shadow 将会无效。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.a</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">35px</span> <span class="function">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">15</span>)</span></span>; <span class="rule"><span class="attribute">display</span>:<span class="value"> table</span></span>; <span class="rule"><span class="attribute">border-collapse</span>:<span class="value"> collapse</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.b</span>, <span class="class">.c</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> table-cell</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"a"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"b"</span>&gt;</span>b<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"c"</span>&gt;</span>c<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[测试半小时，我终于捉住了这只Bug。]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.smalldragonluo.com/tags/CSS/"/>
    
      <category term="box-shadow" scheme="http://blog.smalldragonluo.com/tags/box-shadow/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 实现动画插件]]></title>
    <link href="http://blog.smalldragonluo.com/2014/07/22/JavaScript-%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB%E6%8F%92%E4%BB%B6/"/>
    <id>http://blog.smalldragonluo.com/2014/07/22/JavaScript-实现动画插件/</id>
    <published>2014-07-22T09:34:00.000Z</published>
    <updated>2015-12-06T14:19:03.000Z</updated>
    <content type="html"><![CDATA[<h4 id="缓动函数的概念">缓动函数的概念</h4><p>在这之前，大家应该了解了缓动函数（Easing Functions）的概念：</p>
<p>动画的每一帧需要计算一次元素样式，如果样式改变则需要重绘屏幕。细一点讲，当我们每调用一次计时器函数，需要通过向缓动函数传入一些动画上下文变量，从而获取到元素的某个样式在当前帧合理的值。</p>
<p>我所了解的缓动函数实现方式有两种，一种是tbcd方式（Robert Penner’s Easing Functons）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">t,b,c,d</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> c*t/d + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>t: timestamp 以毫秒（ms）为单位，指从第一帧到当前帧所经历的时间<br>b: beginning position，变量初始值<br>c: change 变量改变量（即在整个动画过程中，变量将从 b 变到 b + c）<br>d: duration 动画时间</p>
<p>另一种是 mootools 的单参数方式，由于我没了解过，这里就不说了，这里主要说一下第一种方式。</p>
<p>整个动画模块为Animation，其接受多个参数（元素， 动画样式， 持续时间[， 缓动函数名][， 回调函数]），是一个构造函数，调用方式为：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animation = <span class="keyword">new</span> Animation(test, &#123;width: &#123;value: <span class="string">"500px"</span>&#125;, <span class="number">500</span>, <span class="string">"sin"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"complete"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">animation.stop();</span><br></pre></td></tr></table></figure>
<p>其中，每个样式属性可单独指定持续时间与缓动函数名，但回调函数必须等到所有动画结束才调用。</p>
<h4 id="Animaion_模块">Animaion 模块</h4><p>Animaion 模块定义如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Animation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> debug = <span class="literal">false</span>, <span class="comment">//如果debug，遇到异常将抛出</span></span><br><span class="line">    unit = &#123;&#125;, <span class="comment">//样式存取函数，详见下方each函数</span></span><br><span class="line">    fx = &#123; <span class="comment">//缓动函数</span></span><br><span class="line">      linear: <span class="function"><span class="keyword">function</span>(<span class="params">currentTime, initialDistance, totalDistance, duration</span>) </span>&#123; <span class="comment">//自带一个线性缓动函数</span></span><br><span class="line">        <span class="keyword">return</span> initialDistance + (currentTime / duration * totalDistance);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//获取当前时间（ms或更精确）</span></span><br><span class="line">      <span class="keyword">return</span> performance.now &amp;&amp; performance.now() || <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    &#125;,</span><br><span class="line">    executorCanceler = <span class="built_in">window</span>.cancelAnimationFrame, <span class="comment">//取消帧函数</span></span><br><span class="line">    executor = <span class="built_in">window</span>.requestAnimationFrame <span class="comment">//帧执行函数</span></span><br><span class="line">    || <span class="built_in">window</span>.webkitRequestAnimationFrame || <span class="built_in">window</span>.msRequestAnimationFrame || <span class="built_in">window</span>.mozRequestAnimationFrame || <span class="built_in">window</span>.oRequestAnimationFrame || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> callbacks = [];</span><br><span class="line">      ! <span class="function"><span class="keyword">function</span> <span class="title">frame</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oldTime = getTime(),</span><br><span class="line">          tmp = callbacks,</span><br><span class="line">          callbacks = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length = tmp.length; i &lt; length; i++) &#123;</span><br><span class="line">          tmp[i].callback(oldTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> currentTime = getTime(),</span><br><span class="line">          delayTime = <span class="built_in">Math</span>.max(<span class="number">16.66</span> - currentTime + oldTime, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        setTimeout(frame, delayTime);</span><br><span class="line">      &#125;();</span><br><span class="line"></span><br><span class="line">      executorCanceler = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length = callbacks.length; i &lt; length; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (callbacks[i].id === id) callbacks.splice(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = &#123;</span><br><span class="line">          callback: callback,</span><br><span class="line">          id: <span class="built_in">Math</span>.random()</span><br><span class="line">        &#125;;</span><br><span class="line">        callbacks.push(context);</span><br><span class="line">        <span class="keyword">return</span> context.id;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;(),</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * 为每个属性运行此函数，类似于启动一个线程（虽然不是真正的线程）</span><br><span class="line">     */</span></span><br><span class="line">    animate = <span class="function"><span class="keyword">function</span>(<span class="params">element, attribute, distances, duration, timingFunction, completeCallback</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> oldTime = getTime(),</span><br><span class="line">        animationPassedTime = <span class="number">0</span>,</span><br><span class="line">        executorReference = executor(<span class="function"><span class="keyword">function</span> <span class="title">anonymous</span>(<span class="params">currentTimeStamp</span>) </span>&#123;</span><br><span class="line">          animationPassedTime = currentTimeStamp - oldTime;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">var</span> computedValues = []; <span class="comment">//computedValues为缓动函数计算值，可能返回数值或者数组（按动画属性不同，比如rgb）</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (animationPassedTime &gt;= duration) &#123;</span><br><span class="line">            <span class="keyword">if</span> (distances.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, length = distances.length; j &lt; length; j++) &#123;</span><br><span class="line">                computedValues.push(distances[j][<span class="number">0</span>] + distances[j][<span class="number">1</span>]);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              computedValues = distances[<span class="number">0</span>][<span class="number">0</span>] + distances[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            stop();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (distances.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length = distances.length; i &lt; length; i++) &#123;</span><br><span class="line">                computedValues.push(fx[timingFunction](animationPassedTime, distances[i][<span class="number">0</span>], distances[i][<span class="number">1</span>], duration));</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              computedValues = fx[timingFunction](animationPassedTime, distances[<span class="number">0</span>][<span class="number">0</span>], distances[<span class="number">0</span>][<span class="number">1</span>], duration);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            animationPassedTime = getTime() - oldTime;</span><br><span class="line">            executorReference = executor(anonymous);</span><br><span class="line">          &#125;</span><br><span class="line">          unit[attribute].setter(element, computedValues);</span><br><span class="line">        &#125;, <span class="built_in">Math</span>.random()),</span><br><span class="line">        completed = <span class="literal">false</span>,</span><br><span class="line">        stop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          executorCanceler(executorReference);</span><br><span class="line">          completeCallback(); <span class="comment">//执行回调函数</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        stop: stop</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * Animation 引用的函数，此函数返回一个包含所有动画属性的控制对象（如停止操作），因此可以采取函数调用或者new的方式创建一个动画对象</span><br><span class="line">     */</span></span><br><span class="line">    init = <span class="function"><span class="keyword">function</span>(<span class="params">element, animationVars, duration, timingFunction, callback</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> animateQueue = &#123;&#125;,</span><br><span class="line">        animationCount = <span class="number">0</span>,</span><br><span class="line">        animationCompletedCount = <span class="number">0</span>,</span><br><span class="line">        completeCallback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//每个animate完成后调用此函数，当计数器满调用callback</span></span><br><span class="line">            animationCompletedCount++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (animationCount === animationCompletedCount) &#123;</span><br><span class="line">              <span class="keyword">typeof</span> timingFunction === <span class="string">"function"</span> ? timingFunction() : callback &amp;&amp; callback();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!element.nodeType) &#123;</span><br><span class="line">        <span class="keyword">if</span> (debug)</span><br><span class="line">          <span class="keyword">throw</span> <span class="string">"an htmlElement is required"</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> attribute <span class="keyword">in</span> animationVars) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(attribute <span class="keyword">in</span> unit)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">"no attribute handler"</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> initialDistance = unit[attribute].getter(element),</span><br><span class="line">            finalDistance = unit[attribute].getter(animationVars[attribute].value || animationVars[attribute]),</span><br><span class="line">            distances = [];</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> initialDistance === <span class="string">"number"</span>) &#123;</span><br><span class="line">            distances.push([initialDistance, finalDistance - initialDistance]);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length = initialDistance.length; i &lt; length; i++) &#123;</span><br><span class="line">              distances.push([initialDistance[i], finalDistance[i] - initialDistance[i]]);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">/*</span><br><span class="line">           * 可以为每个属性指定缓动函数与时间</span><br><span class="line">           */</span></span><br><span class="line">          animateQueue[attribute] = animate(element, attribute, distances, animationVars[attribute].duration || duration, animationVars[attribute].timingFunction || (<span class="keyword">typeof</span> timingFunction === <span class="string">"string"</span> ? timingFunction : <span class="literal">false</span>) || <span class="string">"linear"</span>, completeCallback);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">"an error occurred: "</span> + e.stack;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        animationCount++;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      animateQueue.stop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> attribute <span class="keyword">in</span> animateQueue) &#123;</span><br><span class="line">          animateQueue[attribute].stop &amp;&amp; animateQueue[attribute].stop();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> animateQueue;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">  init.config = <span class="function"><span class="keyword">function</span>(<span class="params">configVars</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (configVars) &#123;</span><br><span class="line">      <span class="keyword">if</span> (configVars.fx) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> fxName <span class="keyword">in</span> configVars.fx) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> configVars.fx[fxName] === <span class="string">"function"</span>) &#123;</span><br><span class="line">            fx[fxName] = configVars.fx[fxName];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (configVars.unit) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> unitName <span class="keyword">in</span> configVars.unit) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> configVars.unit[unitName] === <span class="string">"object"</span>) &#123;</span><br><span class="line">            unit[unitName] = configVars.unit[unitName];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (configVars.debug) &#123;</span><br><span class="line">        debug = configVars.debug || <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  init.each = <span class="function"><span class="keyword">function</span>(<span class="params">array, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> handler === <span class="string">"function"</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length = array.length; i &lt; length; i++) &#123;</span><br><span class="line">        handler.call(array[i], i, array);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span><br><span class="line">   * 赠送几个单位存取函数（暂时实现行内样式读取，单位px -。-）</span><br><span class="line">   */</span></span><br><span class="line">  init.each(<span class="string">"width, height, left, right, top, bottom, marginLeft, marginTop"</span>.split(<span class="regexp">/\s*,\s*/</span>), <span class="function"><span class="keyword">function</span>(<span class="params">index, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> attributeName = <span class="keyword">this</span>;</span><br><span class="line">    unit[attributeName] = &#123;</span><br><span class="line">      getter: <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseInt</span>((element.nodeType &amp;&amp; element.style[attributeName] || element)[<span class="string">"match"</span>](<span class="regexp">/\d+/</span>)[<span class="number">0</span>]);</span><br><span class="line">      &#125;,</span><br><span class="line">      setter: <span class="function"><span class="keyword">function</span>(<span class="params">element, value</span>) </span>&#123;</span><br><span class="line">        element.style[attributeName] = value + <span class="string">"px"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> init;</span><br><span class="line"></span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<h4 id="ShowCase">ShowCase</h4><p>测试如下（需引入Animation）：</p>
<p>详见：<a href="http://runjs.cn/code/lgrfeykn" target="_blank" rel="external">http://runjs.cn/code/lgrfeykn</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span><span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    Animation.config(&#123; <span class="comment">//可以在这里设置或扩充功能</span></span><br><span class="line">      debug: <span class="literal">true</span>,</span><br><span class="line">      fps: <span class="number">60</span>,</span><br><span class="line">      fx: &#123;</span><br><span class="line">        easeOutElastic: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> s = <span class="number">1.70158</span>;</span><br><span class="line">          <span class="keyword">var</span> p = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">var</span> a = c;</span><br><span class="line">          <span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</span><br><span class="line">          <span class="keyword">if</span> ((t /= d) == <span class="number">1</span>) <span class="keyword">return</span> b + c;</span><br><span class="line">          <span class="keyword">if</span> (!p) p = d * <span class="number">.3</span>;</span><br><span class="line">          <span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</span><br><span class="line">            a = c;</span><br><span class="line">            <span class="keyword">var</span> s = p / <span class="number">4</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">var</span> s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</span><br><span class="line">          <span class="keyword">return</span> a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, -<span class="number">10</span> * t) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p) + c + b;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      unit: &#123;</span><br><span class="line">        backgroundColor: &#123; <span class="comment">//</span></span><br><span class="line">          getter: <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> backgroundColor = (element.nodeType &amp;&amp; element.style.backgroundColor || element)[<span class="string">"match"</span>](<span class="regexp">/rgb\((\d+),\s*(\d+),\s*(\d+)\)/</span>);</span><br><span class="line">            <span class="keyword">return</span> [<span class="built_in">parseInt</span>(backgroundColor[<span class="number">1</span>]), <span class="built_in">parseInt</span>(backgroundColor[<span class="number">2</span>]), <span class="built_in">parseInt</span>(backgroundColor[<span class="number">3</span>])];</span><br><span class="line">          &#125;,</span><br><span class="line">          setter: <span class="function"><span class="keyword">function</span>(<span class="params">element, value</span>) </span>&#123;</span><br><span class="line">            element.style.backgroundColor = <span class="string">"rgb("</span> + <span class="built_in">parseInt</span>(value[<span class="number">0</span>]) + <span class="string">", "</span> + <span class="built_in">parseInt</span>(value[<span class="number">1</span>]) + <span class="string">", "</span> + <span class="built_in">parseInt</span>(value[<span class="number">2</span>]) + <span class="string">")"</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> animation = <span class="keyword">new</span> Animation(test, &#123;</span><br><span class="line">      width: &#123;</span><br><span class="line">        value: <span class="string">"100px"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      height: &#123;</span><br><span class="line">        value: <span class="string">"100px"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      marginLeft: &#123;</span><br><span class="line">        value: <span class="string">"50px"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      marginTop: &#123;</span><br><span class="line">        value: <span class="string">"50px"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      backgroundColor: &#123;</span><br><span class="line">        value: <span class="string">"rgb(203,215,255)"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>, <span class="string">"easeOutElastic"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"complete"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">onload</span>=<span class="value">"init();"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"test"</span> <span class="attribute">style</span>=<span class="value">"width: 200px; height: 200px; background: rgb(255,104,228);margin-left: 0; margin-top: 0"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[在这之前，大家应该了解了缓动函数（Easing Functions）的概念：动画的每一帧需要计算一次元素样式，如果样式改变则需要重绘屏幕。细一点讲，当我们每调用一次计时器函数，需要通过向缓动函数传入一些动画上下文变量，从而获取到元素的某个样式在当前帧合理的值。]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.smalldragonluo.com/tags/JavaScript/"/>
    
      <category term="动画" scheme="http://blog.smalldragonluo.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
      <category term="缓动函数" scheme="http://blog.smalldragonluo.com/tags/%E7%BC%93%E5%8A%A8%E5%87%BD%E6%95%B0/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 模拟 Java 类继承]]></title>
    <link href="http://blog.smalldragonluo.com/2014/06/17/JavaScript-%E6%A8%A1%E6%8B%9F-Java-%E7%B1%BB%E7%BB%A7%E6%89%BF/"/>
    <id>http://blog.smalldragonluo.com/2014/06/17/JavaScript-模拟-Java-类继承/</id>
    <published>2014-06-17T03:39:00.000Z</published>
    <updated>2015-12-06T14:19:03.000Z</updated>
    <content type="html"><![CDATA[<p>javascript采用原型继承的方式继承一个类（javascript没有类这个概念，暂时这么称呼吧），但一些使用过Java的程序员可能习惯使用经典的类继承，但javascript原生并不支持这种方式，因此需要手动实现。我是通过定义一个定义类的函数实现的，由于javascript没有访问修饰符，因此如果需要使用到private成员，请使用闭包。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*将一个对象的自有属性复制到另一个对象的方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">from, to</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> from)&#123;</span><br><span class="line">    <span class="keyword">if</span>(from.hasOwnProperty(i))&#123;</span><br><span class="line">      to[i] = from[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*用于定义一个类</span><br><span class="line"> *参数：构造函数，继承的父类， 属性， 静态属性， 是否为单例模式</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineClass</span>(<span class="params">constructor, parent, properties, statics, isSingleton</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*使用代理函数，这样父类采用this.xx定义的引用类型将每个实例独有*/</span></span><br><span class="line">  <span class="keyword">var</span> oldConstructor = constructor;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*如果为单例模式，保存实例，并在以后的调用中返回此实例*/</span></span><br><span class="line">  <span class="keyword">if</span>(isSingleton)&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    constructor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(instance) <span class="keyword">return</span> instance;</span><br><span class="line">        parent.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        oldConstructor.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        instance = <span class="keyword">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      constructor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      parent.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      oldConstructor.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*设置原型属性，这意味着传入的构造函数的原型属性将被覆盖</span><br><span class="line">   *重要：parent内部需要检测参数合理合法性</span><br><span class="line">   */</span></span><br><span class="line">  constructor.prototype = <span class="keyword">new</span> parent();</span><br><span class="line">  <span class="comment">/*将自有属性复制到原型中</span><br><span class="line">   *将静态属性复制到构造函数中，这意味着将不会继承parent的静态属性</span><br><span class="line">   */</span></span><br><span class="line">  merge(properties, constructor.prototype);</span><br><span class="line">  merge(statics, constructor);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*将构造函数更改为当前构造函数</span><br><span class="line">   *将parent的引用保留</span><br><span class="line">   */</span></span><br><span class="line">  constructor.prototype.constructor = constructor;</span><br><span class="line">  constructor.prototype.parent = parent;</span><br><span class="line">  <span class="keyword">return</span> constructor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，不能用此方法继承如Array等内置对象，如果你想通过定义一个类扩展Array的功能，那么在调用Array的某些方法时会出现问题，比如concat返回的数组直接包含两个对象，而不是包含两个对象中的元素。原因是虽然子类的原型链包含Array.prototype，但毕竟不是由Array直接构造，在调用某些方法时可能不会按照原始的方式执行。</p>
]]></content>
    <summary type="html">
    <![CDATA[javascript采用原型继承的方式继承一个类（javascript没有类这个概念，暂时这么称呼吧），但一些使用过Java的程序员可能习惯使用经典的类继承，但javascript原生并不支持这种方式，因此需要手动实现。我是通过定义一个定义类的函数实现的，由于javascript没有访问修饰符，因此如果需要使用到private成员，请使用闭包。]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.smalldragonluo.com/tags/JavaScript/"/>
    
      <category term="继承" scheme="http://blog.smalldragonluo.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 的垃圾回收与内存泄露]]></title>
    <link href="http://blog.smalldragonluo.com/2014/06/16/JavaScript-%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%8E%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    <id>http://blog.smalldragonluo.com/2014/06/16/JavaScript-的垃圾回收与内存泄露/</id>
    <published>2014-06-16T15:33:00.000Z</published>
    <updated>2015-12-06T14:19:03.000Z</updated>
    <content type="html"><![CDATA[<h4 id="GC_方式">GC 方式</h4><p>JavaScript采用垃圾自动回收机制，运行时环境会自动清理不再使用的内存，因此javascript无需像C++等语言一样手动释放无用内存。<br>在这之前先说一下垃圾回收的两种方式：引用计数与标记清除。</p>
<h5 id="引用计数">引用计数</h5><p>引用计数方式会为每个已分配内存单元设置计数器，当计数器减少到0的时候就意味着该单元无法再被引用，将会被清除。<br>有一个问题是，当存在循环引用时，内存单元的计数器将永远不为0，内存的释放会比较复杂（需要使用到弱引用）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.val = obj2;</span><br><span class="line">obj2.val = obj;</span><br></pre></td></tr></table></figure>
<h5 id="标记清除">标记清除</h5><p>标记清除方式维护一条链表，当变量进入scope时被加入这条链表，移出scope时被从链表剔除。当gc被激活时，首先为每个变量打上一个标记，然后清除存在于那条链表的变量的标记以及变量引用的成员的标记。最后，不再使用到的变量仍旧被gc标记着，将被释放，包括循环引用。<br>如果一段不再使用的内存未得到回收，将导致内存泄露， 它将一直占据着内存而无法被利用，可能造成系统运行缓慢，浏览器崩溃等问题。<br>关于浏览器的javascript实现使用哪种回收机制，众说纷纭，感觉贵圈好乱。<br>我google了一下，<a href="http://www.ibm.com/developerworks/web/library/wa-memleak/?S_TACT=105AGX52&amp;S_CMP=cn-a-wa" target="_blank" rel="external">http://www.ibm.com/developerworks/web/library/wa-memleak/?S_TACT=105AGX52&amp;S_CMP=cn-a-wa</a> 提到IE以及火狐都使用引用计数的机制回收DOM对象， <a href="http://blogs.msdn.com/b/ericlippert/archive/2003/09/17/53038.aspx" target="_blank" rel="external">http://blogs.msdn.com/b/ericlippert/archive/2003/09/17/53038.aspx</a> 说JScript采用 nongenerational mark-and-sweep garbage collector（一种标记清除），还有资料提到现代浏览器都使用标记清除回收javascript垃圾。总结为，浏览器回收JavaScript内存采用标记清除，使用引用计数回收宿主对象(如Dom、Bom、ActiveX Object)。<br>根据我在IE上做的测试，javascript对象间的循环引用不会引发内存泄露。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;, obj2 = &#123;&#125;;</span><br><span class="line">    obj.val = obj2;</span><br><span class="line">    obj2.val = obj;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<h4 id="内存泄露">内存泄露</h4><p>内存使用呈周期性变化，一直稳定，看来不用担心javascript对象的循环引用问题。<br>既然Dom采用引用计数回收内存，那是否存在内存泄露问题？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nodeHold = [],</span><br><span class="line">    interval = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, length = <span class="number">1000</span>; i &lt; length; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> node = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>),</span><br><span class="line">        obj = &#123;&#125;;</span><br><span class="line">        node.val = obj;</span><br><span class="line">        obj.val = node;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(node);</span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(node);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br></pre></td></tr></table></figure>
<p>在IE7与IE8上，内存直线上升。<br>与 <a href="http://blogs.msdn.com/b/ericlippert/archive/2003/09/17/53038.aspx" target="_blank" rel="external">http://blogs.msdn.com/b/ericlippert/archive/2003/09/17/53038.aspx</a> 所称一致，原因是javascript的垃圾回收管不了Dom对象，且Dom使用引用计数回收方式，导致循环引用无法回收。前提是Dom必须先加到文档树再删除（我猜测是为真正的Dom对象分配内存，而这不属于javascript）。<br>要注意的是，IE9+并不存在循环引用导致Dom内存泄露问题，可能是微软做了优化，或者Dom的回收方式已经改变。</p>
]]></content>
    <summary type="html">
    <![CDATA[JavaScript采用垃圾自动回收机制，运行时环境会自动清理不再使用的内存，因此javascript无需像C++等语言一样手动释放无用内存。]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.smalldragonluo.com/tags/JavaScript/"/>
    
      <category term="内存泄露" scheme="http://blog.smalldragonluo.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
      <category term="垃圾回收" scheme="http://blog.smalldragonluo.com/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 位运算笔记]]></title>
    <link href="http://blog.smalldragonluo.com/2014/06/16/JavaScript%20%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.smalldragonluo.com/2014/06/16/JavaScript 位运算笔记/</id>
    <published>2014-06-16T05:08:00.000Z</published>
    <updated>2015-12-06T14:10:39.000Z</updated>
    <content type="html"><![CDATA[<p>之前一直以为，在js的位运算中，双精度浮点数在内部会先被转成32位整数，再执行位运算，然后再转为64位数值，因此效率极低。今天实验发现，对浮点执行位运算只会导致数值不准确，而不会导致效率低下，相比乘法，左移位要快66%（其实就是浮点运算与整数运算的差距）。</p>
<p>以下结果在 IE 7 ~ IE 10 上测试得出</p>
<h4 id="技巧1：移位运算比乘除法快（当因数是2的幂数）">技巧1：移位运算比乘除法快（当因数是2的幂数）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = a &lt;&lt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>大概快 6.8%</p>
<h4 id="技巧2：奇偶判断">技巧2：奇偶判断</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = a &amp; <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>0位与1相与，相比于 x % 2，大概快 35%</p>
<h4 id="技巧3：判断两个数符号是否相同">技巧3：判断两个数符号是否相同</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a ^ b) &gt;= <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>相比于</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( a == <span class="number">0</span> )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( a &gt; <span class="number">0</span> )</span><br><span class="line">  <span class="keyword">return</span> b &gt;= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">return</span> b &lt;= <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>其效率基本一样，但更简洁。</p>
<p>相比于</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a * b) &gt;= <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>不会有溢出问题。</p>
<h4 id="技巧4：判断一个数是否为2的幂">技巧4：判断一个数是否为2的幂</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a &amp; (a - <span class="number">1</span>)) == <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[之前一直以为，在js的位运算中，双精度浮点数在内部会先被转成32位整数，再执行位运算，然后再转为64位数值，因此效率极低。今天实验发现，对浮点执行位运算只会导致数值不准确，而不会导致效率低下，相比乘法，左移位要快66%（其实就是浮点运算与整数运算的差距）。]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.smalldragonluo.com/tags/JavaScript/"/>
    
      <category term="位运算" scheme="http://blog.smalldragonluo.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 的原型及原型链]]></title>
    <link href="http://blog.smalldragonluo.com/2013/10/22/JavaScript-%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%8F%8A%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://blog.smalldragonluo.com/2013/10/22/JavaScript-的原型及原型链/</id>
    <published>2013-10-22T14:29:00.000Z</published>
    <updated>2015-12-06T14:19:03.000Z</updated>
    <content type="html"><![CDATA[<p>许多人对JavaScript的原型及原型链仍感到困惑，网上的文章又大多长篇大论，令读者不明觉厉。本人小学时语文拿过全校第一名，我将用最简洁明了的文字介绍JavaScript的原型及原型链。</p>
<h4 id="什么是原型">什么是原型</h4><p>每一个对象都有原型，使用 <strong>proto</strong> 标记，原型是一个对象的引用或 null（ Object.prototype 的原型为 null ），允许对象使用其原型所引用的对象中的变量。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">fun.prototype.a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> fun();</span><br><span class="line"></span><br><span class="line">obj.a;  <span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<h4 id="原型的来源">原型的来源</h4><p>对象的原型来自其构造函数的原型属性（用 prototype 标记）的引用。注意原型与原型属性是两个概念。Function 为实例（ function ）定义了原型属性，其中包含一个构造函数（默认是 function 对象自己，用于构造 function 自己的实例），因此所有 function 都有原型属性。Function 将自己的的原型属性的引用作为 function 的原型。 new 一个 function ，function 的实例便有了原型，指向 function 的原型属性。</p>
<p>有码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun.prototype.b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> fun();</span><br><span class="line"></span><br><span class="line">obj.a; <span class="comment">//1</span></span><br><span class="line">obj.b; <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<p>有图</p>
<p><img src="http://static.oschina.net/uploads/space/2013/1022/215445_09Zx_992034.png" alt=""></p>
<p>解释</p>
<p>上面的代码定义了 fun 这个函数，其构造函数是 Function()，所以 fun 的原型就是 Function 的原型属性。Function 还为 fun 定义了属于 fun 的原型属性，所以 fun 既有原型又有原型属性。我们又为 fun 的原型属性定义了变量 b，所以能通过 fun 的实例 obj 找到 b，而 obj 由 fun 构造，所以 obj 被赋予了变量 a，这属于 obj 自己。原型属性也是对象，仍然有原型，是其构造函数的原型属性的引用。</p>
<h4 id="操作原型">操作原型</h4><h5 id="获取原型">获取原型</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.__proto__; (IE 不支持)</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(obj); (IE <span class="number">8</span>及以下不支持)</span><br></pre></td></tr></table></figure>
<h5 id="访问原型的变量">访问原型的变量</h5><p>除了以上两种获取原型方式，还可以直接obj.attr;（不用我多说了吧）</p>
<h5 id="修改原型的变量">修改原型的变量</h5><p>无法通过 <code>obj.__proto__.attr = *; 或 Object.getPrototypeOf(obj).attr = *;</code> 来修改原型的变量值，即无法修改原型，属于js内部特性。<br>你只能通过修改对象的构造函数的原型属性（prototype）来使对象的原型发生改变。如 <code>fun.prototype.attr = *;</code> 这将反应在 obj 上。<br>假设对象的原型含有 attr 这个属性，当通过 obj.attr 这种方式访问原型的变量，默认可以在原型内搜寻到 attr 变量，如果企图使用 obj.attr = *; 修改原型，js的处理方式是新建一个属于 obj 的属性 attr ，原型不会被修改（注意，如果 attr 是一个对象的引用，则指向的对象将会被修改）。再次访问 attr ，并不会访问到原型的 attr 变量。</p>
<h4 id="原型的作用">原型的作用</h4><p>继承，如</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">fun.prototype = <span class="built_in">String</span>.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> fun().split <span class="comment">//function split() &#123;[native code]&#125;</span></span><br></pre></td></tr></table></figure>
<p>问题每个对象都有原型属性吗？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;.prototype; <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line">fun.prototype; <span class="comment">// [object Object]</span></span><br></pre></td></tr></table></figure>
<p>函数有原型属性，而像{}、new fun()这样的非函数对象则没有原型属性（它们也不用去构造实例），但可以手动为其创建原型属性，虽然这没什么意义。<br>总而言之，原型属性是其上级或者手动赋予的（fun.prototype = {}），不一定存在。作用是为函数的实例提供构造方法及继承变量。而原型是其构造函数的原型属性，供对象使用。</p>
<h4 id="原型链">原型链</h4><p>通过自己的原型并向上寻找直到 <code>Object.prototype.__proto__;</code> 这条链就是原型链。 </p>
<h4 id="题外话">题外话</h4><p>关于Function 与 Object 的关系，我暂时没有去深究，但看以下代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.constructor == <span class="built_in">Function</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Object</span>) == <span class="built_in">Object</span>.getPrototypeOf(<span class="built_in">Function</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype == <span class="built_in">Function</span>.prototype <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p>从代码看 Object 与 Function 都由相同的 constructor 创建 ，原型相同，但分配的原型属性则不一样。Object 由 Function 构造而来，Function 的原型属性的构造函数即自身，这可以理解，但 Function 的构造函数也是自身？这种语言的内部机制似乎没必要研究，但我们要知道如何通过原型达到继承的目的。</p>
<p>如有不妥，请大侠指正。</p>
]]></content>
    <summary type="html">
    <![CDATA[许多人对JavaScript的原型及原型链仍感到困惑，网上的文章又大多长篇大论，令读者不明觉厉。本人小学时语文拿过全校第一名，我将用最简洁明了的文字介绍JavaScript的原型及原型链。]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.smalldragonluo.com/tags/JavaScript/"/>
    
      <category term="原型" scheme="http://blog.smalldragonluo.com/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="前端技术" scheme="http://blog.smalldragonluo.com/categories/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
